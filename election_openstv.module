<?php
/**
 * @file
 * Main file for the Election OpenSTV Integration module.
 */

/**
 * Implements hook_menu().
 */
function election_openstv_menu() {
  $items = array();
  $items['election-post/%election_post/results/openstv'] = array(
    'title' => 'OpenSTV',
    'description' => 'Count results with OpenSTV',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_openstv_form', 1),
    'access callback' => 'election_openstv_access',
    'access arguments' => array('count', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );
  $items['admin/config/election/openstv'] = array(
    'title' => 'OpenSTV integration settings',
    'description' => 'Configure settings for integration with the OpenSTV (openstv.org) vote counting software.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_openstv_config'),
    'access arguments' => array('administer election_openstv'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function election_openstv_permission() {
  return array(
    'administer election_openstv' => array(
      'title' => t('Administer OpenSTV integration.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback function for running an OpenSTV count.
 */
function election_openstv_access($op, $post, $account = NULL) {
  if ($op != 'count') {
    return FALSE;
  }
  if (!election_openstv_check_support($post->election)) {
    return FALSE;
  }
  return election_results_access('view', $post, $account);
}

/**
 * Check whether an election supports OpenSTV counting.
 */
function election_openstv_check_support($election) {
  return election_export_check_support($election);
}

/**
 * Form for counting an election's results with OpenSTV.
 */
function election_openstv_form($form, &$form_state, stdClass $post) {

  drupal_set_title(t('OpenSTV: %post', array('%post' => $post->title)), PASS_THROUGH);

  $election = $post->election;

  $form['#post'] = $post;
  $form['#election'] = $election;

  $form['method'] = array(
    '#type' => 'select',
    '#title' => t('OpenSTV count method'),
    '#options' => drupal_map_assoc(_election_openstv_get_methods()),
    '#required' => TRUE,
  );

  $form['buttons'] = array(
    '#type' => 'actions',
    '#weight' => 100,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Count'),
  );

  if (!empty($form_state['result'])) {
    $form['result'] = array(
      '#markup' => '<h2>OpenSTV output</h2><div class="election-count-openstv-result">' . $form_state['result'] . '</div>',
      '#weight' => 101,
    );
  }

  return $form;

}

/**
 * Submit function for the form election_openstv_form().
 */
function election_openstv_form_submit($form, &$form_state) {

  $post = $form['#post'];
  $method = $form_state['values']['method'];

  $result = election_openstv_count($post, $method, 'HtmlReport');

  if (empty($result)) {
    drupal_set_message(t('An error occurred while counting.'), 'error');
    $form_state['rebuild'] = TRUE;
    return;
  }

  $form_state['rebuild'] = TRUE;
  $form_state['result'] = _election_openstv_sanitize_html_report($result);

}

/**
 * Count results for a post.
 */
function election_openstv_count($post, $method, $output_format = 'TextReport') {
  // Export the results into a ballot file. We specify a temporary filename
  // rather than use drupal_tempnam(), because OpenSTV only accepts files with a
  // .blt extension.
  $export_destination = 'temporary://election-count-' . (int) $post->post_id . '.blt';
  $export_filename = election_export_post($post, $export_destination);

  // Get the absolute system path to the file.
  $export_filename = drupal_realpath($export_filename);

  // Build the OpenSTV command.
  $cmd = escapeshellcmd(_election_openstv_get_command());
  $cmd .= ' -r ' . escapeshellarg($output_format);
  $cmd .= ' ' . escapeshellarg($method);
  $cmd .= ' ' . escapeshellarg($export_filename);

  // Run the OpenSTV command and capture the results.
  $result = shell_exec($cmd);

  // Delete the temporary export file.
  unlink($export_filename);

  if (empty($result)) {
    return FALSE;
  }

  return $result;
}

/**
 * The system settings form for the module.
 */
function election_openstv_config($form, &$form_state) {
  $form['help'] = array(
    '#markup' => t('Configure the command used to run OpenSTV in your system.')
      . ' ' . t('Example commands: <ul><li>openstv-run-election</li><li>python /usr/share/openstv/openstv/runElection.py</li><li>python /var/www/mysite/sites/all/libraries/openstv/runElection.py</li></ul>'),
  );
  $form['election_openstv_command'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenSTV command'),
    '#default_value' => _election_openstv_get_command(),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Validate the system settings form.
 */
function election_openstv_config_validate($form, &$form_state) {
  $openstv_command = $form_state['values']['election_openstv_command'];
  // Trim whitespace around the command.
  $openstv_command = trim($openstv_command);
  // Check that it can be executed.
  if (!_election_openstv_executable($openstv_command)) {
    form_set_error('election_openstv_command', t('The command %command cannot be executed.', array('%command' => $openstv_command)));
  }
  // Save the trimmed value.
  $form_state['values']['election_openstv_command'] = $openstv_command;
}

/**
 * Sanitize and format the HTML produced by OpenSTV for display.
 */
function _election_openstv_sanitize_html_report($str) {
  // Start output from 'OpenSTV...' (to cut out the HTML head).
  if ($start = strpos($str, 'OpenSTV')) {
    $str = substr($str, $start);
  }
  // Remove any <style> blocks.
  $str = preg_replace('/<style[^>]*>[^<]*<\/style>/i', '', $str);
  // Strip out most tags.
  $str = strip_tags($str, '<p><b><i><strong><em><table><thead><tbody><tr><th><td>');
  // Run any enabled filters for Full HTML or the fallback text format.
  $str = check_markup($str, 'full_html');
  return $str;
}

/**
 * Get a list of valid OpenSTV counting methods.
 */
function _election_openstv_get_methods() {
  return array(
    'Approval',
    'Borda',
    'Bucklin',
    'CambridgeSTV',
    'Condorcet',
    'Coombs',
    'ERS97STV',
    'FTSTV',
    'GPCA2000STV',
    'IRV',
    'MeekNZSTV',
    'MeekQXSTV',
    'MeekSTV',
    'MinneapolisSTV',
    'NIrelandSTV',
    'QPQ',
    'RTSTV',
    'SNTV',
    'ScottishSTV',
    'SuppVote',
    'WarrenQXSTV',
    'WarrenSTV',
  );
}

/**
 * Get a list of valid OpenSTV output formats.
 */
function _election_openstv_get_output_formats() {
  return array(
    'CsvReport',
    'HtmlReport',
    'MinimalReport',
    'TextReport',
    'YamlReport',
  );
}

/**
 * Get the OpenSTV command.
 */
function _election_openstv_get_command() {
  return variable_get('election_openstv_command', 'openstv-run-election');
}

/**
 * Find out whether OpenSTV can be executed with the configured command.
 */
function _election_openstv_executable($command) {
  $command_parts = explode(' ', $command);
  $command_name = reset($command_parts);
  $which = shell_exec('which ' . escapeshellarg($command_name));
  if (empty($which)) {
    return FALSE;
  }
  // If the command format is something like "/usr/bin/python filename.py",
  // check whether the file exists and is readable.
  if (strpos($command, 'python ') !== FALSE && ($filename = end($command_parts)) && !is_readable($filename)) {
    return FALSE;
  }
  return TRUE;
}
